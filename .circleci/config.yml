version: 2.1

orbs:
  windows: circleci/windows@2.2.0

jobs:
  build-frontend:
    description: Build frontend
    docker:
      - image: cimg/node:21.4.0
    steps:
      - checkout
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "SuperChessFrontend/pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            cd SuperChessFrontend
            sudo corepack enable
            sudo corepack prepare pnpm@latest-8 --activate
      - run:
          name: Install Dependencies
          command: |
            cd SuperChessFrontend
            pnpm install
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "SuperChessFrontend/pnpm-lock.yaml" }}
          paths:
            - SuperChessFrontend/node_modules
      - run:
          name: Build react
          command: |
            cd SuperChessFrontend
            pnpm build
      - persist_to_workspace:
          root: SuperChessFrontend
          paths:
            - dist

  build-backend:
    description: Build backend with Release configuration
    docker:
        - image: mcr.microsoft.com/dotnet/nightly/sdk:8.0
    steps:
      - add_ssh_keys
      - checkout
      - restore_cache:
          keys:
            - dotnet-packages-v1-{{ checksum "SuperChessBackend/SuperChessBackend.csproj" }}
      - run:
          name: "Install project dependencies"
          command: |
            cd SuperChessBackend
            dotnet restore
      - save_cache:
          name: Save nugets cache
          key: dotnet-packages-v1-{{ checksum "SuperChessBackend/SuperChessBackend.csproj" }}
          paths:
            - /root/.nuget/packages
      - run:
          name: "Build Application according to some given configuration"
          command: |
            cd SuperChessBackend
            dotnet build --configuration Release
      - run:
          name: "Publish to a subfolder"
          command: |
            cd SuperChessBackend
            dotnet publish --configuration Release --output Build
      - run:
          name: "Add appsettings.json"
          command: |
            cd SuperChessBackend
            echo $appsettings > Build/appsettings.json

      - persist_to_workspace:
          root: SuperChessBackend
          paths:
            - Build
      
  deploy:
    docker:
      - image: cimg/node:21.4.0
    steps:
      - run: sudo apt update
      - run: sudo apt-get install rsync
      # adds ssh keys from circleci
      - add_ssh_keys
      - attach_workspace:
          at: .
    
      # Deploy frontend
      - run:
          name: Build react
          command: rsync -e "ssh -o StrictHostKeyChecking=no" -arvc --delete ./dist/* $VPS_USER@$VPS_URL:~/static/chess_frontend

      # Send backend
      - run:
          name: Build react
          command: rsync -e "ssh -o StrictHostKeyChecking=no" -arvc --delete ./Build/* $VPS_USER@$VPS_URL:~/containers/chess_backend

      # Start backend
      # - run: > 
      #     ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_URL "
      #       export DB_CONNECTION_STRING=$DB_CONNECTION_STRING ; 
      #       cd ./containers/chess_backend ;
      #       docker compose -f docker-compose.prod.yaml up --build -d"
      

      # copies files from pipeline to vps via ssh
      # - run: rsync -e "ssh -o StrictHostKeyChecking=no" -arvc --delete . $VPS_USER@$VPS_URL:~/containers/superchess
      # - run: > 
      #     ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_URL "
      #       export PORT=5555 ; 
      #       export DB_CONNECTION_STRING=$DB_CONNECTION_STRING ; 
      #       cd ~/projects/url_shortener ;
      #       docker compose -f docker-compose.prod.yaml up --build -d"
workflows:  
  build-and-deploy:
    jobs:
      - build-backend
      - build-frontend
      - deploy:
          requires:
            - build-backend
            - build-frontend